<sect2 id="Operators">
<title>Operators</title>
<para><informaltable frame="all">
<tgroup cols="4">

<thead>
<row>
                    <entry>Name</entry>
                    <entry>Description</entry>
                    <entry>Argument Types</entry>
                    <entry>Return Type</entry>
</row>
</thead>
<tbody>
<row>
<entry valign="top" align="left" morerows="3">
!=</entry>
<entry valign="top" align="left" morerows="3">
Inequality operator. Compare two values and return true if
      they are different.
</entry>
<entry valign="top" align="left" morerows="0">
Int, Int
</entry>
<entry valign="top" align="left" morerows="0">
Bool</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Float, Float
</entry>
<entry valign="top" align="left" morerows="0">
Bool</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex, Complex
</entry>
<entry valign="top" align="left" morerows="0">
Bool</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Bool, Bool
</entry>
<entry valign="top" align="left" morerows="0">
Bool</entry>
</row>
<row>
<entry valign="top" align="left" morerows="1">
%</entry>
<entry valign="top" align="left" morerows="1">
Modulus operator. Computes the remainder when x is divided by y. Not to be confused with the complex modulus.
</entry>
<entry valign="top" align="left" morerows="0">
Int, Int
</entry>
<entry valign="top" align="left" morerows="0">
Int</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Float, Float
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
&amp;&amp;</entry>
<entry valign="top" align="left" morerows="0">
Logical AND.
</entry>
<entry valign="top" align="left" morerows="0">
Bool, Bool
</entry>
<entry valign="top" align="left" morerows="0">
Bool</entry>
</row>
<row>
<entry valign="top" align="left" morerows="5">
*</entry>
<entry valign="top" align="left" morerows="5">
Multiplication operator.
</entry>
<entry valign="top" align="left" morerows="0">
Int, Int
</entry>
<entry valign="top" align="left" morerows="0">
Int</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Float, Float
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex, Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Hyper, Hyper
</entry>
<entry valign="top" align="left" morerows="0">
Hyper</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Hyper, Float
</entry>
<entry valign="top" align="left" morerows="0">
Hyper</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Color, Float
</entry>
<entry valign="top" align="left" morerows="0">
Color</entry>
</row>
<row>
<entry valign="top" align="left" morerows="4">
+</entry>
<entry valign="top" align="left" morerows="4">
Adds two numbers together.
</entry>
<entry valign="top" align="left" morerows="0">
Int, Int
</entry>
<entry valign="top" align="left" morerows="0">
Int</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Float, Float
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex, Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Hyper, Hyper
</entry>
<entry valign="top" align="left" morerows="0">
Hyper</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Color, Color
</entry>
<entry valign="top" align="left" morerows="0">
Color</entry>
</row>
<row>
<entry valign="top" align="left" morerows="4">
-</entry>
<entry valign="top" align="left" morerows="4">
Subtracts two numbers
</entry>
<entry valign="top" align="left" morerows="0">
Int, Int
</entry>
<entry valign="top" align="left" morerows="0">
Int</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Float, Float
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex, Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Hyper, Hyper
</entry>
<entry valign="top" align="left" morerows="0">
Hyper</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Color, Color
</entry>
<entry valign="top" align="left" morerows="0">
Color</entry>
</row>
<row>
<entry valign="top" align="left" morerows="4">
/</entry>
<entry valign="top" align="left" morerows="4">
Division operator
</entry>
<entry valign="top" align="left" morerows="0">
Float, Float
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex, Float
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex, Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Hyper, Float
</entry>
<entry valign="top" align="left" morerows="0">
Hyper</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Color, Float
</entry>
<entry valign="top" align="left" morerows="0">
Color</entry>
</row>
<row>
<entry valign="top" align="left" morerows="2">
&lt;</entry>
<entry valign="top" align="left" morerows="2">
Less-than operator. Compare two values and return true if the first is less than the second.
</entry>
<entry valign="top" align="left" morerows="0">
Int, Int
</entry>
<entry valign="top" align="left" morerows="0">
Bool</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Float, Float
</entry>
<entry valign="top" align="left" morerows="0">
Bool</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex, Complex
</entry>
<entry valign="top" align="left" morerows="0">
Bool</entry>
</row>
<row>
<entry valign="top" align="left" morerows="2">
&lt;=</entry>
<entry valign="top" align="left" morerows="2">
Less-than-or-equal operator. Compare two values and return true if the first is less than or equal to the second.
</entry>
<entry valign="top" align="left" morerows="0">
Int, Int
</entry>
<entry valign="top" align="left" morerows="0">
Bool</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Float, Float
</entry>
<entry valign="top" align="left" morerows="0">
Bool</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex, Complex
</entry>
<entry valign="top" align="left" morerows="0">
Bool</entry>
</row>
<row>
<entry valign="top" align="left" morerows="3">
==</entry>
<entry valign="top" align="left" morerows="3">
Equality operator. Compare two values and return true if they are
      the same.
</entry>
<entry valign="top" align="left" morerows="0">
Int, Int
</entry>
<entry valign="top" align="left" morerows="0">
Bool</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Float, Float
</entry>
<entry valign="top" align="left" morerows="0">
Bool</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex, Complex
</entry>
<entry valign="top" align="left" morerows="0">
Bool</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Bool, Bool
</entry>
<entry valign="top" align="left" morerows="0">
Bool</entry>
</row>
<row>
<entry valign="top" align="left" morerows="2">
&gt;</entry>
<entry valign="top" align="left" morerows="2">
Greater-than operator. Compare two values and return true if the first is greater than the second.
</entry>
<entry valign="top" align="left" morerows="0">
Int, Int
</entry>
<entry valign="top" align="left" morerows="0">
Bool</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Float, Float
</entry>
<entry valign="top" align="left" morerows="0">
Bool</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex, Complex
</entry>
<entry valign="top" align="left" morerows="0">
Bool</entry>
</row>
<row>
<entry valign="top" align="left" morerows="2">
&gt;=</entry>
<entry valign="top" align="left" morerows="2">
Greater-than-or-equal operator. Compare two values and return true if the first is greater than or equal to the second.
</entry>
<entry valign="top" align="left" morerows="0">
Int, Int
</entry>
<entry valign="top" align="left" morerows="0">
Bool</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Float, Float
</entry>
<entry valign="top" align="left" morerows="0">
Bool</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex, Complex
</entry>
<entry valign="top" align="left" morerows="0">
Bool</entry>
</row>
<row>
<entry valign="top" align="left" morerows="2">
^</entry>
<entry valign="top" align="left" morerows="2">
Exponentiation operator. Computes x to the power y.
</entry>
<entry valign="top" align="left" morerows="0">
Float, Float
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex, Float
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex, Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
not</entry>
<entry valign="top" align="left" morerows="0">
Logical NOT.
</entry>
<entry valign="top" align="left" morerows="0">
Bool
</entry>
<entry valign="top" align="left" morerows="0">
Bool</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
||</entry>
<entry valign="top" align="left" morerows="0">
Logical OR.
</entry>
<entry valign="top" align="left" morerows="0">
Bool, Bool
</entry>
<entry valign="top" align="left" morerows="0">
Bool</entry>
</row>
</tbody>
</tgroup>
</informaltable></para>
</sect2>
<sect2 id="Functions">
<title>Functions</title>
<para><informaltable frame="all">
<tgroup cols="4">

<thead>
<row>
                    <entry>Name</entry>
                    <entry>Description</entry>
                    <entry>Argument Types</entry>
                    <entry>Return Type</entry>
</row>
</thead>
<tbody>
<row>
<entry valign="top" align="left" morerows="0">
#rand</entry>
<entry valign="top" align="left" morerows="0">
Each time this is accessed, it returns a new pseudo-random complex number. This is primarily for backwards compatibility with Fractint formulas - use the random() function in new formulas.
</entry>
<entry valign="top" align="left" morerows="0">

</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
#random</entry>
<entry valign="top" align="left" morerows="0">
Each time this is accessed, it returns a new pseudo-random complex number. This is primarily for backwards compatibility with Fractint formulas - use the random() function in new formulas.
</entry>
<entry valign="top" align="left" morerows="0">

</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
@fn1</entry>
<entry valign="top" align="left" morerows="0">
Predefined function parameter used by Fractint formulas
</entry>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
@fn2</entry>
<entry valign="top" align="left" morerows="0">
Predefined function parameter used by Fractint formulas
</entry>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
@fn3</entry>
<entry valign="top" align="left" morerows="0">
Predefined function parameter used by Fractint formulas
</entry>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
@fn4</entry>
<entry valign="top" align="left" morerows="0">
Predefined function parameter used by Fractint formulas
</entry>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="2">
abs</entry>
<entry valign="top" align="left" morerows="2">
The absolute value of a number. abs(3) = abs(-3) = 3.
      abs() of a complex number is a complex number consisting of
      the absolute values of the real and imaginary parts, i.e.
      abs(a,b) = (abs(a),abs(b)).
</entry>
<entry valign="top" align="left" morerows="0">
Int
</entry>
<entry valign="top" align="left" morerows="0">
Int</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Float
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="2">
acos</entry>
<entry valign="top" align="left" morerows="2">
Inverse cosine function.
</entry>
<entry valign="top" align="left" morerows="0">
Float
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Hyper
</entry>
<entry valign="top" align="left" morerows="0">
Hyper</entry>
</row>
<row>
<entry valign="top" align="left" morerows="2">
acosh</entry>
<entry valign="top" align="left" morerows="2">
Inverse hyperbolic cosine function.
</entry>
<entry valign="top" align="left" morerows="0">
Float
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Hyper
</entry>
<entry valign="top" align="left" morerows="0">
Hyper</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
alpha</entry>
<entry valign="top" align="left" morerows="0">
The alpha component of a color. Can be assigned to.
</entry>
<entry valign="top" align="left" morerows="0">
Color
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="2">
asin</entry>
<entry valign="top" align="left" morerows="2">
Inverse sine function.
</entry>
<entry valign="top" align="left" morerows="0">
Float
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Hyper
</entry>
<entry valign="top" align="left" morerows="0">
Hyper</entry>
</row>
<row>
<entry valign="top" align="left" morerows="2">
asinh</entry>
<entry valign="top" align="left" morerows="2">
Inverse hyperbolic sine function.
</entry>
<entry valign="top" align="left" morerows="0">
Float
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Hyper
</entry>
<entry valign="top" align="left" morerows="0">
Hyper</entry>
</row>
<row>
<entry valign="top" align="left" morerows="2">
atan</entry>
<entry valign="top" align="left" morerows="2">
Inverse tangent function.
</entry>
<entry valign="top" align="left" morerows="0">
Float
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Hyper
</entry>
<entry valign="top" align="left" morerows="0">
Hyper</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
atan2</entry>
<entry valign="top" align="left" morerows="0">
The angle between this complex number and the real line,
      aka the complex argument.
</entry>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="2">
atanh</entry>
<entry valign="top" align="left" morerows="2">
Inverse hyperbolic tangent function.
</entry>
<entry valign="top" align="left" morerows="0">
Float
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Hyper
</entry>
<entry valign="top" align="left" morerows="0">
Hyper</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
blend</entry>
<entry valign="top" align="left" morerows="0">
Blend two colors together in the ratio given by the 3rd parameter.
</entry>
<entry valign="top" align="left" morerows="0">
Color, Color, Float
</entry>
<entry valign="top" align="left" morerows="0">
Color</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
blue</entry>
<entry valign="top" align="left" morerows="0">
The blue component of a color. Can be assigned to.
</entry>
<entry valign="top" align="left" morerows="0">
Color
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
bool</entry>
<entry valign="top" align="left" morerows="0">
Construct a boolean. It's not really required (bool x = bool(true) is just the same as bool x = true) but is included for consistency.
</entry>
<entry valign="top" align="left" morerows="0">
Bool
</entry>
<entry valign="top" align="left" morerows="0">
Bool</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
cabs</entry>
<entry valign="top" align="left" morerows="0">
The complex modulus of a complex number z.
      cabs(a,b) is equivalent to sqrt(a*a+b*b).
      This is also the same as sqrt(|z|)
</entry>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="1">
ceil</entry>
<entry valign="top" align="left" morerows="1">
Round up to the next highest number.
</entry>
<entry valign="top" align="left" morerows="0">
Float
</entry>
<entry valign="top" align="left" morerows="0">
Int</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="1">
cmag</entry>
<entry valign="top" align="left" morerows="1">
The squared modulus of a complex or hypercomplex number z.
      cmag(a,b) is equivalent to a*a+b*b. This is the same as |z|.
</entry>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Hyper
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
color</entry>
<entry valign="top" align="left" morerows="0">
Constructs a new color from floating point red, green, blue and alpha
     components. Equivalent to rgba.
</entry>
<entry valign="top" align="left" morerows="0">
Float, Float, Float, Float
</entry>
<entry valign="top" align="left" morerows="0">
Color</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
complex</entry>
<entry valign="top" align="left" morerows="0">
Construct a complex number from two real parts.
      complex(a,b) is equivalent to (a,b).
</entry>
<entry valign="top" align="left" morerows="0">
Float, Float
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
compose</entry>
<entry valign="top" align="left" morerows="0">
Composite the second color on top of the first, with opacity given
by the 3rd parameter.
</entry>
<entry valign="top" align="left" morerows="0">
Color, Color, Float
</entry>
<entry valign="top" align="left" morerows="0">
Color</entry>
</row>
<row>
<entry valign="top" align="left" morerows="1">
conj</entry>
<entry valign="top" align="left" morerows="1">
The complex conjugate. conj(a,b) is equivalent to (a,-b).
</entry>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Hyper
</entry>
<entry valign="top" align="left" morerows="0">
Hyper</entry>
</row>
<row>
<entry valign="top" align="left" morerows="2">
cos</entry>
<entry valign="top" align="left" morerows="2">
trigonometric sine function.
</entry>
<entry valign="top" align="left" morerows="0">
Float
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Hyper
</entry>
<entry valign="top" align="left" morerows="0">
Hyper</entry>
</row>
<row>
<entry valign="top" align="left" morerows="2">
cosh</entry>
<entry valign="top" align="left" morerows="2">
Hyperbolic cosine function.
</entry>
<entry valign="top" align="left" morerows="0">
Float
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Hyper
</entry>
<entry valign="top" align="left" morerows="0">
Hyper</entry>
</row>
<row>
<entry valign="top" align="left" morerows="1">
cosxx</entry>
<entry valign="top" align="left" morerows="1">
Incorrect version of cosine function. Provided for backwards
      compatibility with equivalent wrong function in Fractint.
</entry>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Hyper
</entry>
<entry valign="top" align="left" morerows="0">
Hyper</entry>
</row>
<row>
<entry valign="top" align="left" morerows="2">
cotan</entry>
<entry valign="top" align="left" morerows="2">
Trigonometric cotangent function.
</entry>
<entry valign="top" align="left" morerows="0">
Float
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Hyper
</entry>
<entry valign="top" align="left" morerows="0">
Hyper</entry>
</row>
<row>
<entry valign="top" align="left" morerows="2">
cotanh</entry>
<entry valign="top" align="left" morerows="2">
Hyperbolic cotangent function.
</entry>
<entry valign="top" align="left" morerows="0">
Float
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Hyper
</entry>
<entry valign="top" align="left" morerows="0">
Hyper</entry>
</row>
<row>
<entry valign="top" align="left" morerows="2">
exp</entry>
<entry valign="top" align="left" morerows="2">
exp(x) is equivalent to e^x
</entry>
<entry valign="top" align="left" morerows="0">
Float
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Hyper
</entry>
<entry valign="top" align="left" morerows="0">
Hyper</entry>
</row>
<row>
<entry valign="top" align="left" morerows="1">
flip</entry>
<entry valign="top" align="left" morerows="1">
Swap the real and imaginary parts of a complex number.
      flip(a,b) = (b,a).
</entry>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Hyper
</entry>
<entry valign="top" align="left" morerows="0">
Hyper</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
float</entry>
<entry valign="top" align="left" morerows="0">
Construct a floating-point number.
</entry>
<entry valign="top" align="left" morerows="0">
Float
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="1">
floor</entry>
<entry valign="top" align="left" morerows="1">
Round down to the next lowest number.
</entry>
<entry valign="top" align="left" morerows="0">
Float
</entry>
<entry valign="top" align="left" morerows="0">
Int</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
fn1</entry>
<entry valign="top" align="left" morerows="0">
Predefined function parameter used by Fractint formulas
</entry>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
fn2</entry>
<entry valign="top" align="left" morerows="0">
Predefined function parameter used by Fractint formulas
</entry>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
fn3</entry>
<entry valign="top" align="left" morerows="0">
Predefined function parameter used by Fractint formulas
</entry>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
fn4</entry>
<entry valign="top" align="left" morerows="0">
Predefined function parameter used by Fractint formulas
</entry>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
gradient</entry>
<entry valign="top" align="left" morerows="0">
Look up a color from the default gradient.
</entry>
<entry valign="top" align="left" morerows="0">
Float
</entry>
<entry valign="top" align="left" morerows="0">
Color</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
green</entry>
<entry valign="top" align="left" morerows="0">
The green component of a color. Can be assigned to.
</entry>
<entry valign="top" align="left" morerows="0">
Color
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
hsl</entry>
<entry valign="top" align="left" morerows="0">
Create a color from hue, saturation and lightness components. The alpha channel is set to to 1.0 (=100%).
</entry>
<entry valign="top" align="left" morerows="0">
Float, Float, Float
</entry>
<entry valign="top" align="left" morerows="0">
Color</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
hsla</entry>
<entry valign="top" align="left" morerows="0">
Create a color from hue, saturation and lightness components and an alpha channel.
</entry>
<entry valign="top" align="left" morerows="0">
Float, Float, Float, Float
</entry>
<entry valign="top" align="left" morerows="0">
Color</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
hsv</entry>
<entry valign="top" align="left" morerows="0">
Create a color from hue, saturation and value components. HSV is a similar color model to HSL but has a different valid range for brightness.
</entry>
<entry valign="top" align="left" morerows="0">
Float, Float, Float
</entry>
<entry valign="top" align="left" morerows="0">
Color</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
hue</entry>
<entry valign="top" align="left" morerows="0">
The hue of a color.
</entry>
<entry valign="top" align="left" morerows="0">
Color
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="1">
hyper</entry>
<entry valign="top" align="left" morerows="1">
Construct a hypercomplex number with a real and 3 imaginary parts.
      Can be passed either 2 complex numbers or 4 floating-point numbers.
      hyper(a,b,c,d) is equivalent to the shorthand (a,b,c,d).
</entry>
<entry valign="top" align="left" morerows="0">
Float, Float, Float, Float
</entry>
<entry valign="top" align="left" morerows="0">
Hyper</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex, Complex
</entry>
<entry valign="top" align="left" morerows="0">
Hyper</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
hyper_j</entry>
<entry valign="top" align="left" morerows="0">
The 3rd component of a hypercomplex number. Can be assigned to.
      hyper_j(a,b,c,d) = c.
</entry>
<entry valign="top" align="left" morerows="0">
Hyper
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
hyper_jk</entry>
<entry valign="top" align="left" morerows="0">
The 3rd and 4th parts of a hypercomplex number.
      Can be assigned to. hyper_jk(a,b,c,d) = (c,d).
</entry>
<entry valign="top" align="left" morerows="0">
Hyper
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
hyper_k</entry>
<entry valign="top" align="left" morerows="0">
The 4th component of a hypercomplex number. Can be assigned to.
      hyper_k(a,b,c,d) = d.
</entry>
<entry valign="top" align="left" morerows="0">
Hyper
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
hyper_ri</entry>
<entry valign="top" align="left" morerows="0">
The real and imaginary parts of a hypercomplex number.
      Can be assigned to. hyper_ri(a,b,c,d) = (a,b).
</entry>
<entry valign="top" align="left" morerows="0">
Hyper
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="4">
ident</entry>
<entry valign="top" align="left" morerows="4">
Do nothing. ident(x) is equivalent to x.
      This function is useless in normal formulas but
      comes in useful as a value for a function parameter
      to a formula. For example, a general formula like z = @fn1(z*z)+c
      can be set back to a plain Mandelbrot by setting fn1 to ident.
      Note: ident() is compiled out so there's no speed penalty involved.
</entry>
<entry valign="top" align="left" morerows="0">
Int
</entry>
<entry valign="top" align="left" morerows="0">
Int</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Float
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Bool
</entry>
<entry valign="top" align="left" morerows="0">
Bool</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Hyper
</entry>
<entry valign="top" align="left" morerows="0">
Hyper</entry>
</row>
<row>
<entry valign="top" align="left" morerows="1">
imag</entry>
<entry valign="top" align="left" morerows="1">
Extract the imaginary part of a complex or hypercomplex number.
      imag(a,b) = b.
      imag() is unusual in that it can be assigned to: imag(z) = 7 changes
      the imag part of z.
</entry>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Hyper
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
imag2</entry>
<entry valign="top" align="left" morerows="0">
The square of the imaginary part of a complex number.
      real2(a,b) = b*b.
      While not a generally useful function, this is provided to ease porting
      of files from older Gnofract 4D versions.
</entry>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
int</entry>
<entry valign="top" align="left" morerows="0">
Construct an integer. To convert a float to an int, use floor, ceil, round or trunc instead.
</entry>
<entry valign="top" align="left" morerows="0">
Int
</entry>
<entry valign="top" align="left" morerows="0">
Int</entry>
</row>
<row>
<entry valign="top" align="left" morerows="2">
log</entry>
<entry valign="top" align="left" morerows="2">
The natural log.
</entry>
<entry valign="top" align="left" morerows="0">
Float
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Hyper
</entry>
<entry valign="top" align="left" morerows="0">
Hyper</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
lum</entry>
<entry valign="top" align="left" morerows="0">
The luminance (or brightness) of a color.
</entry>
<entry valign="top" align="left" morerows="0">
Color
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
manhattan</entry>
<entry valign="top" align="left" morerows="0">
The Manhattan distance between the origin and complex number z.
      manhattan(a,b) is equivalent to abs(a) + abs(b).
</entry>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
manhattanish</entry>
<entry valign="top" align="left" morerows="0">
A variant on Manhattan distance provided for backwards
      compatibility. manhattanish(a,b) is equivalent to a+b.
</entry>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
manhattanish2</entry>
<entry valign="top" align="left" morerows="0">
A variant on Manhattan distance provided for backwards
      compatibility. manhattanish2(a,b) is equivalent to (a*a + b*b)^2.
</entry>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
max</entry>
<entry valign="top" align="left" morerows="0">
Returns the larger of its two arguments.
</entry>
<entry valign="top" align="left" morerows="0">
Float, Float
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
max2</entry>
<entry valign="top" align="left" morerows="0">
max2(a,b) returns the larger of a*a or b*b. Provided for
      backwards compatibility.
</entry>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
mergemultiply</entry>
<entry valign="top" align="left" morerows="0">
Multiplies colors together. Result is always darker than either input.
</entry>
<entry valign="top" align="left" morerows="0">
Color, Color
</entry>
<entry valign="top" align="left" morerows="0">
Color</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
mergenormal</entry>
<entry valign="top" align="left" morerows="0">
Returns second color, ignoring first.
</entry>
<entry valign="top" align="left" morerows="0">
Color, Color
</entry>
<entry valign="top" align="left" morerows="0">
Color</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
min</entry>
<entry valign="top" align="left" morerows="0">
Returns the smaller of its two arguments.
</entry>
<entry valign="top" align="left" morerows="0">
Float, Float
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
min2</entry>
<entry valign="top" align="left" morerows="0">
min2(a,b) returns the smaller of a*a or b*b. Provided for
      backwards compatibility.
</entry>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="3">
neg</entry>
<entry valign="top" align="left" morerows="3">
No documentation yet.
</entry>
<entry valign="top" align="left" morerows="0">
Int
</entry>
<entry valign="top" align="left" morerows="0">
Int</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Float
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Hyper
</entry>
<entry valign="top" align="left" morerows="0">
Hyper</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
rand</entry>
<entry valign="top" align="left" morerows="0">
Each time this is accessed, it returns a new pseudo-random complex number. This is primarily for backwards compatibility with Fractint formulas - use the random() function in new formulas.
</entry>
<entry valign="top" align="left" morerows="0">

</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="1">
real</entry>
<entry valign="top" align="left" morerows="1">
Extract the real part of a complex or hypercomplex number.
      real(a,b) = a.
      real() is unusual in that it can be assigned to: real(z) = 7 changes
      the real part of z.
</entry>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Hyper
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
real2</entry>
<entry valign="top" align="left" morerows="0">
The square of the real part of a complex number.
      real2(a,b) = a*a.
      While not a generally useful function, this is provided to ease porting
      of files from older Gnofract 4D versions.
</entry>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="2">
recip</entry>
<entry valign="top" align="left" morerows="2">
The reciprocal of a number. recip(x) is equivalent to 1/x.
      Note that not all hypercomplex numbers have a proper reciprocal.
</entry>
<entry valign="top" align="left" morerows="0">
Float
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Hyper
</entry>
<entry valign="top" align="left" morerows="0">
Hyper</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
red</entry>
<entry valign="top" align="left" morerows="0">
The red component of a color. Can be assigned to.
</entry>
<entry valign="top" align="left" morerows="0">
Color
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
rgb</entry>
<entry valign="top" align="left" morerows="0">
Create a color from three color components. The alpha channel is set to to 1.0 (=100%).
</entry>
<entry valign="top" align="left" morerows="0">
Float, Float, Float
</entry>
<entry valign="top" align="left" morerows="0">
Color</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
rgba</entry>
<entry valign="top" align="left" morerows="0">
Create a color from three color components and an alpha channel.
</entry>
<entry valign="top" align="left" morerows="0">
Float, Float, Float, Float
</entry>
<entry valign="top" align="left" morerows="0">
Color</entry>
</row>
<row>
<entry valign="top" align="left" morerows="1">
round</entry>
<entry valign="top" align="left" morerows="1">
Round to the nearest number (0.5 rounds up).
</entry>
<entry valign="top" align="left" morerows="0">
Float
</entry>
<entry valign="top" align="left" morerows="0">
Int</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
sat</entry>
<entry valign="top" align="left" morerows="0">
The saturation of a color.
</entry>
<entry valign="top" align="left" morerows="0">
Color
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="2">
sin</entry>
<entry valign="top" align="left" morerows="2">
trigonometric sine function.
</entry>
<entry valign="top" align="left" morerows="0">
Float
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Hyper
</entry>
<entry valign="top" align="left" morerows="0">
Hyper</entry>
</row>
<row>
<entry valign="top" align="left" morerows="2">
sinh</entry>
<entry valign="top" align="left" morerows="2">
Hyperbolic sine function.
</entry>
<entry valign="top" align="left" morerows="0">
Float
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Hyper
</entry>
<entry valign="top" align="left" morerows="0">
Hyper</entry>
</row>
<row>
<entry valign="top" align="left" morerows="3">
sqr</entry>
<entry valign="top" align="left" morerows="3">
Square the argument. sqr(x) is equivalent to x*x or x^2.
</entry>
<entry valign="top" align="left" morerows="0">
Int
</entry>
<entry valign="top" align="left" morerows="0">
Int</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Float
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Hyper
</entry>
<entry valign="top" align="left" morerows="0">
Hyper</entry>
</row>
<row>
<entry valign="top" align="left" morerows="2">
sqrt</entry>
<entry valign="top" align="left" morerows="2">
The square root.
      The square root of a negative float number is NaN
      (ie it is NOT converted to complex). Thus sqrt((-3,0)) != sqrt(-3).
</entry>
<entry valign="top" align="left" morerows="0">
Float
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Hyper
</entry>
<entry valign="top" align="left" morerows="0">
Hyper</entry>
</row>
<row>
<entry valign="top" align="left" morerows="2">
tan</entry>
<entry valign="top" align="left" morerows="2">
trigonometric sine function.
</entry>
<entry valign="top" align="left" morerows="0">
Float
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Hyper
</entry>
<entry valign="top" align="left" morerows="0">
Hyper</entry>
</row>
<row>
<entry valign="top" align="left" morerows="2">
tanh</entry>
<entry valign="top" align="left" morerows="2">
Hyperbolic tangent function.
</entry>
<entry valign="top" align="left" morerows="0">
Float
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Hyper
</entry>
<entry valign="top" align="left" morerows="0">
Hyper</entry>
</row>
<row>
<entry valign="top" align="left" morerows="1">
trunc</entry>
<entry valign="top" align="left" morerows="1">
Round towards zero.
</entry>
<entry valign="top" align="left" morerows="0">
Float
</entry>
<entry valign="top" align="left" morerows="0">
Int</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="2">
zero</entry>
<entry valign="top" align="left" morerows="2">
Returns zero.
</entry>
<entry valign="top" align="left" morerows="0">
Int
</entry>
<entry valign="top" align="left" morerows="0">
Int</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Float
</entry>
<entry valign="top" align="left" morerows="0">
Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
Complex
</entry>
<entry valign="top" align="left" morerows="0">
Complex</entry>
</row>
</tbody>
</tgroup>
</informaltable></para>
</sect2>
<sect2 id="Symbols">
<title>Symbols</title>
<para><informaltable frame="all">
<tgroup cols="4">

<thead>
<row>
                    <entry>Name</entry>
                    <entry>Description</entry>
                    <entry>Argument Types</entry>
                    <entry>Return Type</entry>
</row>
</thead>
<tbody>
<row>
<entry valign="top" align="left" morerows="0">
#center</entry>
<entry valign="top" align="left" morerows="0">
Where the center of the image is located on the complex plane
</entry>
<entry>Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
#color</entry>
<entry valign="top" align="left" morerows="0">
Set this from a coloring function to directly set the color instead of using a gradient
</entry>
<entry>Color</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
#fate</entry>
<entry valign="top" align="left" morerows="0">
The fate of a point can be used to distinguish between different basins of attraction or whatever you like. Set this to a number from 2 to 128 to indicate that a different 'fate' has befallen this point. 0 indicates the point has diverged, 1 that it has been trapped, &gt;1 whatever you like. Can only be usefully updated in the #final section.
</entry>
<entry>Int</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
#index</entry>
<entry valign="top" align="left" morerows="0">
The point in the gradient to use for the color of this point.
</entry>
<entry>Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
#inside</entry>
<entry valign="top" align="left" morerows="0">
Set this in the final section of a formula to override whether a point is colored with the inside or outside coloring algorithm. This is mainly useful in conjuction with #fate.
</entry>
<entry>Bool</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
#magn</entry>
<entry valign="top" align="left" morerows="0">
The magnification factor of the image. This is the number of times the image size has doubled, or ln(4.0/size)
</entry>
<entry>Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
#maxit</entry>
<entry valign="top" align="left" morerows="0">
No documentation yet.
</entry>
<entry>Int</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
#maxiter</entry>
<entry valign="top" align="left" morerows="0">
No documentation yet.
</entry>
<entry>Int</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
#numiter</entry>
<entry valign="top" align="left" morerows="0">
The number of iterations performed.
</entry>
<entry>Int</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
#pi</entry>
<entry valign="top" align="left" morerows="0">
The constant pi, 3.14159...
</entry>
<entry>Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
#pixel</entry>
<entry valign="top" align="left" morerows="0">
The (X,Y) coordinates of the current point. When viewing the Mandelbrot set, this has a different value for each pixel. When viewing the Julia set, it remains constant for each pixel.
</entry>
<entry>Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
#solid</entry>
<entry valign="top" align="left" morerows="0">
Set this to true in a coloring function to use the solid color rather than the color map.
</entry>
<entry>Bool</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
#tolerance</entry>
<entry valign="top" align="left" morerows="0">
10% of the distance between adjacent pixels.
</entry>
<entry>Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
#xypixel</entry>
<entry valign="top" align="left" morerows="0">
The (X,Y) coordinates of the current point. When viewing the Mandelbrot set, this has a different value for each pixel. When viewing the Julia set, it remains constant for each pixel.
</entry>
<entry>Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
#z</entry>
<entry valign="top" align="left" morerows="0">
No documentation yet.
</entry>
<entry>Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
#zwpixel</entry>
<entry valign="top" align="left" morerows="0">
The (Z,W) coordinates of the current point. (See #pixel for the other two coordinates.) When viewing the Mandelbrot set, this remains constant for each pixel on the screen; when viewing the Julia set, it's different for each pixel. Initialize z to some function of this to take advantage of 4D drawing.
</entry>
<entry>Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
@p1</entry>
<entry valign="top" align="left" morerows="0">
Predefined parameter used by Fractint formulas
</entry>
<entry>Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
@p2</entry>
<entry valign="top" align="left" morerows="0">
Predefined parameter used by Fractint formulas
</entry>
<entry>Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
@p3</entry>
<entry valign="top" align="left" morerows="0">
Predefined parameter used by Fractint formulas
</entry>
<entry>Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
@p4</entry>
<entry valign="top" align="left" morerows="0">
Predefined parameter used by Fractint formulas
</entry>
<entry>Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
@p5</entry>
<entry valign="top" align="left" morerows="0">
Predefined parameter used by Fractint formulas
</entry>
<entry>Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
@p6</entry>
<entry valign="top" align="left" morerows="0">
Predefined parameter used by Fractint formulas
</entry>
<entry>Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
maxit</entry>
<entry valign="top" align="left" morerows="0">
No documentation yet.
</entry>
<entry>Int</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
maxiter</entry>
<entry valign="top" align="left" morerows="0">
No documentation yet.
</entry>
<entry>Int</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
p1</entry>
<entry valign="top" align="left" morerows="0">
Predefined parameter used by Fractint formulas
</entry>
<entry>Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
p2</entry>
<entry valign="top" align="left" morerows="0">
Predefined parameter used by Fractint formulas
</entry>
<entry>Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
p3</entry>
<entry valign="top" align="left" morerows="0">
Predefined parameter used by Fractint formulas
</entry>
<entry>Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
p4</entry>
<entry valign="top" align="left" morerows="0">
Predefined parameter used by Fractint formulas
</entry>
<entry>Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
p5</entry>
<entry valign="top" align="left" morerows="0">
Predefined parameter used by Fractint formulas
</entry>
<entry>Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
p6</entry>
<entry valign="top" align="left" morerows="0">
Predefined parameter used by Fractint formulas
</entry>
<entry>Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
pi</entry>
<entry valign="top" align="left" morerows="0">
The constant pi, 3.14159...
</entry>
<entry>Float</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
pixel</entry>
<entry valign="top" align="left" morerows="0">
The (X,Y) coordinates of the current point. When viewing the Mandelbrot set, this has a different value for each pixel. When viewing the Julia set, it remains constant for each pixel.
</entry>
<entry>Complex</entry>
</row>
<row>
<entry valign="top" align="left" morerows="0">
z</entry>
<entry valign="top" align="left" morerows="0">
No documentation yet.
</entry>
<entry>Complex</entry>
</row>
</tbody>
</tgroup>
</informaltable></para>
</sect2>
